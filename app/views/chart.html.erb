
<div id='data'>
</div>


<script type="text/javascript">
/* global d3, _ */
(function() {

	String.prototype.capitalizeFirstLetter = function() {
    	return this.charAt(0).toUpperCase() + this.slice(1);
	}

	var myMath = {};

	myMath.round = function(number, precision) {
	    var factor = Math.pow(10, precision);
	    var tempNumber = number * factor;
	    var roundedTempNumber = Math.round(tempNumber);
	    return roundedTempNumber / factor;
	};


	var guardian,independent,express,telegraph,mail,average,helper,helperLabel,mailLine,mailChart,mailLabel,mailHelper,mailTooltip,mailText,mailLabelText,mailEmoji,mailEmojiText;
	var expressLine,expressChart,expressLabel,expressHelper,expressTooltip,expressText,expressLabelText;
	var guardianLine,guardianChart,guardianLabel,guardianHelper,guardianTooltip,guardianText,guardianLabelText,guardianEmoji,guardianEmojiText;
	var independentLine,independentChart,independentLabel,independentHelper,independentTooltip,independentText,independentLabelText,independentEmoji,independentEmojiText;
	var telegraphLine,telegraphChart,telegraphLabel,telegraphHelper,telegraphTooltip,telegraphText,telegraphLabelText,telegraphEmoji,telegraphEmojiText;
	var averageLine,averageChart,averageLabel,averageHelper,averageTooltip,averageText,averageLabelText,averageEmoji,averageEmojiText;
	var paperKey, relevantObj, relevantField;
	var allObjects = {  
						'guardian' : { 'chartclass' : 'chart__guardian--focus',
					        		'line' : guardianLine,
					        		'chart' : guardianChart,
					        		'label' : guardianLabel,
					        		'helper': guardianHelper,
					        		'emoji' :guardianEmoji,
					        		'emojitext' : guardianEmojiText,
					        		'tooltip': guardianTooltip,
					        		'tooltipclass' : 'chart__tooltip--guardian',
					        		'text': guardianText,
					        		'logo': '145x88_Guardian.png',
					        		'labeltext': guardianLabelText
		        					},
						'independent' : {'chartclass' : 'chart__independent--focus',
					        		'line' : independentLine,
					        		'chart' : independentChart,
					        		'label' : independentLabel,
					        		'helper': independentHelper,
					        		'emoji' : independentEmoji,
					        		'emojitext' : independentEmojiText,
					        		'tooltip': independentTooltip,
					        		'tooltipclass' : 'chart__tooltip--independent',
					        		'text': independentText,
					        		'logo': 'independent_small.png',
					        		'labeltext': independentLabelText
					        	},

					    'mail' : {'chartclass' : 'chart__mail--focus',
					        		'line' : mailLine,
					        		'chart' : mailChart,
					        		'label' : mailLabel,
					        		'helper': mailHelper,
					        		'emoji' : mailEmoji,
					        		'emojitext' : mailEmojiText,
					        		'tooltip': mailTooltip,
					        		'tooltipclass' : 'chart__tooltip--mail',
					        		'text': mailText,
					        		'logo': '145x88_DailyMail.png',
					        		'labeltext': mailLabelText
					        	},

					    'telegraph' : {'chartclass' : 'chart__telegraph--focus',
					        		'line' : telegraphLine,
					        		'chart' : telegraphChart,
					        		'label' : telegraphLabel,
					        		'helper': telegraphHelper,
					        		'emoji' : telegraphEmoji,
					        		'emojitext' : telegraphEmojiText,
					        		'tooltip': telegraphTooltip,
					        		'tooltipclass' : 'chart__tooltip--telegraph',
					        		'text': telegraphText,
					        		'logo': '145x88_DailyTelegraph.png',
					        		'labeltext': telegraphLabelText
					        	},
					        		'express' : {'chartclass' : 'chart__express--focus',
		        		'line' : expressLine,
		        		'chart' : expressChart,
		        		'label' : expressLabel,
		        		'helper': expressHelper,
		        		'tooltip': expressTooltip,
		        		'tooltipclass' : 'chart__tooltip--express',
		        		'text': expressText,
		        		'logo': 'express.png',
		        		'labelText': expressLabelText
		        		},

					        	// average must be the last in this list
					    'average' : {'chartclass' : 'chart__average--focus',
					        		'line' : averageLine,
					        		'chart' : averageChart,
					        		'label' : averageLabel,
					        		'helper': averageHelper,
					        		'emoji' : averageEmoji,
					        		'emojitext' : averageEmojiText,
					        		'tooltip': averageTooltip,
					        		'tooltipclass' : 'chart__tooltip--average',
					        		'text': averageText,
					        		'labeltext': averageLabelText
					        	}   	
		        	};
   
	var windowW = $('#data').width();
	var windowH = $(window).height();

	var navDisplayState = $('#uppernav').css('display');
	var width = windowW - 100;

	var windowM = windowW/8;
	var responsiveTicks = Math.round(windowW/150);
  	var margin = {top: 220, right: 0, bottom: 70, left: 50};
  	var margin2  = {top: (450), right: 0, bottom: 100, left: 0};
  	var height   = windowH - margin.top - margin.bottom;
  	var height2  = windowH - margin2.top - margin2.bottom;
    var x = d3.time.scale().range([0, width]);
    var x2  = d3.time.scale().range([0, width]);
    var y = d3.scale.linear().range([height, 0]);
    var y1  = d3.scale.linear().range([height, 0]);
    var y2  = d3.scale.linear().range([height2, 0]);
    var y3  = d3.scale.linear().range([800, 0]);

	// var dayFormat = d3_time_format.timeFormat("%x"); //(NEW!) date

  	var parseDate = d3.time.format('%X-%d/%m/%Y').parse;
  	var parseDateNew = d3.time.format('%Y-%m-%d').parse;
    var bisectDate = d3.bisector(function(d) { return parseDate(d.date); }).left;
    var bisectDateNew = d3.bisector(function(d) { return parseDateNew(d.date); }).left;
    var legendFormat = d3.time.format('%b %d, %Y');
    var timeFormat = d3.time.format('%H:00 ');
  	var xAxis = d3.svg.axis().scale(x).ticks(responsiveTicks).tickFormat(d3.time.format('%b %y')).orient('bottom');
    var xAxis2  = d3.svg.axis().scale(x2).orient('bottom');
    var yAxis   = d3.svg.axis().scale(y).orient('left');

  	var svg = d3.select('#data').append('svg')
	    .attr('class', 'chart')
	    .attr('id', 'svg')
	    .attr('width', width + margin.right + 100)
	    .attr('height', height + margin.top + margin.bottom );

  	var focus = svg.append('g')
    	.attr('class', 'focus')
    	.attr('width', width + 10)
    	.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

    var context = svg.append('g')
    .attr('class', 'context')
    .attr('transform', 'translate(' + margin2.left + ',' + (margin2.top + 60) + ')');

    var area2 = d3.svg.area()
    .interpolate('monotone')
    .x(function(d) { return x2(d.date); })
    .y0(height2)
    .y1(function(d) { return y2(d.average); });


    var legend = svg.append('g')
   	 .attr('width', width)
   	 .attr('height', 30)
   	 .attr('transform', 'translate(' + margin2.left + ', 20)')
   	 .append('text')
     .attr('class', 'chart__title')
     .text('The Gutter Index');

     var subLegend = svg.append('g')
   	 .attr('class', 'chart__subtitle')
   	 .attr('width', width)
   	 .attr('height', 30)
   	 .attr('transform', 'translate(' + margin2.left + ', 60)')
   	 .append('text')
     .attr('class', 'chart__symbol')
     .text('Hover for details');


	// scores needed as not using D3 CSV
   var scores = <%=@all_scores_json%>; 
   var logoUrls = <%=@logos%>; 

   // var isOffline = <%#@offline%>; console.log(isOffline); 
   var testdata = [
					{"date": "11:00:00-01/01/2015",
					 "express": "-2.75",
					 "guardian": "-4.35",
					 "independent": "-3.0",
					 "mail": "-1.3",
					 "telegraph": "-1.0",
					 "times": "-1.2",
					 "average": '1.0'},
					{"date": "11:00:00-02/01/2015",
					 "express": "-2.85",
					 "guardian": "-4.25",
					 "independent": "-2.0",
					 "mail": "-1.8",
					 "telegraph": "-2.0",
					 "times": "-1.4",
					 "average": '1.0'},
					{"date": "11:00:00-03/01/2015",
					 "express": "-3.85",
					 "guardian": "-3.25",
					 "independent": "-1.0",
					 "mail": "-1.8",
					 "telegraph": "-2.5",
					 "times": "-1.9",
					 "average": '1.0'}
					];

	drawData(scores);
	// drawCSV();


	// COMMON FUNCTIONS


	function drawData(data){

			   // var brush = d3.svg.brush()
					 //      .x(x2)
					 //      .on('brush', brushed);


			   var data=data;
		       var xRange = d3.extent(
		       					data.map(
		       						function(d) {
					       		       	return parseDateNew(d.date); 
		       		       }));
			    var minDate = xRange[0];

			    // add 3 mins to  last date to make it play nice with bars
			    var maxDate = xRange[1];
			    var allValues = [].concat(
			    		data.map(function (d) {return (d.guardian);}), 
			    		data.map(function (d) {return (d.mail);}),
			    		data.map(function (d) {return (d.independent);}),
			    		data.map(function (d) {return (d.telegraph);})
			    	);

			    var min = Math.round(Math.min.apply(null, allValues)),
			    max = Math.round(Math.max.apply(null, allValues));
			    y.range([height, min]);
			    y.domain([max+1,min-1]);
			    x.domain([minDate,maxDate]);
			    x2.domain(x.domain());
			    y2.domain(y.domain());
			    y3.domain(d3.extent(allValues));

			    var make_y_axis = function () {
			    	return d3.svg.axis()
			      .scale(y)
			      .orient('left')
			      .ticks(3);
			  	};

			  	var range = legend.append('text')
			      .text(legendFormat(new Date(xRange[0])) + ' - ' + legendFormat(new Date(xRange[1])))
			      .style('text-anchor', 'end')
			      .attr('transform', 'translate(' + width + ', 0)');

			    focus.append('g')
			        .attr('class', 'y chart__grid')
			        .call(make_y_axis()
			        .tickSize(-width, 0, 0)
			        .tickFormat(''));

			    focus.append('g')
			        .attr('class', 'x axis x-responsive')
			        .attr('transform', 'translate(0 ,' + height + ')')
			        .call(xAxis);

			    focus.append('g')
			        .attr('class', 'y axis smiley_ticks_helper')
			        .attr('transform', 'translate(-5, 0)')
			        .call(yAxis);

			    // context.append('path')
			    //     .datum(data)
			    //     .attr('class', 'chart__area area')
			    //     .attr('d', area2);

			    // context.append('g')
			    //     .attr('class', 'x axis chart__axis--context')
			    //     .attr('y', 0)
			    //     .attr('transform', 'translate(0,' + (height2 - 22) + ')')
			    //     .call(xAxis2);

			    // context.append('g')
			    //     .attr('class', 'x brush')
			    //     .call(brush)
			    //   .selectAll('rect')
			    //     .attr('y', -6)
			    //     .attr('height', height2 + 7);

			    var yAxisSmileys   = d3.svg.axis().scale(y).orient('left').ticks(4).orient("left");

			    // USE LOCAL MEDIA!
			   	var allSmileys={
			    	'2':  'http://blog.openconnection.com/wp-content/uploads/2015/04/closed-eyes-smiley.png',
			    	'0': 'http://afv.com/wp-content/uploads/2014/11/Neutral.png',
			    	'-2':  'http://vaks.in/wp-content/uploads/2012/07/e416.png',
			    	'-4':  'http://www.clipartbest.com/cliparts/aie/xnR/aiexnR4i4.png',
			    	'-6': 'https://image.freepik.com/free-photo/evil-bad-emoticon_318-40219.jpg'
			    };

			    focus.select(".smiley_ticks_helper").selectAll(".tick").each(function(d,i) {
					  d3.select(this).append("image").attr({"xlink:href": allSmileys[d.toString()],
					         "width": 25,
					         "height": 25,
					         "transform":"translate(-45, -10)"
					        })
					});


		        var allObjectKeys = Object.keys(allObjects);
			   
			    var allFunctions = {
				   	'line':  makeLine,
				   	'chart':  makeChart,
				   	'label': makeLabel,
				   	'helper': makeHelper,
				   	'emoji': makeEmoji,
				   	'text' : makeText,
				   	'labeltext' : makeLabelText,
				   	'emojitext': makeEmojiText,
				   	'logo' : makeLogo,
				   	'tooltip': makeTooltip
				   }

				   function make(type){ 					    
					    for(var prop in allObjects){
					    	var myFunc = allFunctions[type];
					    	allObjects[prop][type]=myFunc(prop);
					    }
					}

					function getAll(e){ // gives array of items
						var arr = [];
				  		for (var prop in allObjects){
				  			arr.push(allObjects[prop][e]);
				  		}
				  		return arr;
				  	}

				  	function getAllNames(){ // gives array of items
						var arr = [];
				  		for (var prop in allObjects){
				  			arr.push(prop);
				  		}
				  		return arr;
				  	}

				  	function makeAllAsObject(e){ // gives obj of item, 'guardian':'x', etc
						var obj = {};
				  		for (var prop in allObjects){
				  			obj[prop] = allObjects[prop][e];
				  		}
				  		return obj;
				  	}

				var allPapers=getAllNames();

			// LINES

			   
			    function makeLine(name){

					   return d3.svg.line()
					    .interpolate('monotone')
					    .x(function(d) { return x(parseDateNew(d.date)); })
					    .y(function(d) { return y(d[name]); });
			    }

			    make('line');
			  
			  	
			  	// CHARTS
			  	function makeChart(name){
			    	return focus.append('path')
			        .datum(data)
			        .attr('class', 'chart__line line ' + allObjects[name]['chartclass'])
			        .attr('d', allObjects[name]['line']);
			    }

		      	make('chart');

				// LABELS
				function makeLabel(name){
			    	return svg.append('g')
			      .attr('class', 'chart__helper')
			      .style('text-anchor', 'end')
			      .attr('class', name);
			    }

			    make('label');

				// set up original legend display


				// HELPERS
				function makeHelper(name){
			    	return svg.append('g')
			      .attr('class', 'chart__helper')
			      .style('text-anchor', 'end')
			      .style('display', null)
			      .attr('class', name);
			    }

			    var labelx = parseInt(width-70+margin.left);

			    helper = svg.append('g')
			      .attr('class', 'chart__helper')
			      .style('text-anchor', 'end')
			      .style('font-size', '14px')
			      .attr('transform', 'translate(' + labelx + ', 15)');

			    helperLabel = svg.append('g')
			      .attr('class', 'chart__helper')
			      .style('text-anchor', 'end')
			      .style('font-size', '14px')
			      .attr('transform', 'translate(' + parseInt(width+margin.left) + ', 15)');

			    make('helper');

			    function makeText(name){
			    	return allObjects[name]['helper'].append('text').attr('class', 'indented_details labels').style('vertical-align','top');
			    }

			   make('text');
			   helperText = helper.append('text').attr('class', 'indented_details');

			     function makeLabelText(name){
			    	return allObjects[name]['label'].attr('class', 'labels').append('text').attr('class', 'indented_details').text(name);
			    }

			    make('labeltext');
			    helperLabelText = helperLabel.append('text').attr('class', 'indented_details');
			

			    function makeEmoji(name){
			    	return svg.append('g')
			      .attr('class', 'emoji')
			      .style('text-anchor', 'end')
			      .attr('class', name)
			      ;
			    }

			   make('emoji');

			      function makeEmojiText(name){
			    	return allObjects[name]['emoji'].append('text').attr('class', 'indented_details');
			    }


			  make('emojitext');

			   function makeLogo(name){

			   	var titleName = name.capitalizeFirstLetter();

		    	return svg.append('g')
		      .style('text-anchor', 'end')
		      .attr('class', name + ' chart_logo')
		      .append("svg:image")
		      .attr({"xlink:href": "/images/" + logoUrls[titleName],
						         "width": 90,
						         "height": 60,
						         "transform":"translate(-10000, -10000)"
						        });
			    }

			    make('logo');

		 		function makeTooltip(name){
			    	return focus.append('g')
			      .attr('class', allObjects[name]['tooltipclass'])
			      .append('circle')
			      .style('display', 'none')
			      .attr('r', 2.5)
			      .attr('class', name)
			      .style("fill", "white")
			      .style("stroke-width","3");
			    }

			    make('tooltip');

			  	allObjects['average']['tooltip'].attr('r', 5);

			  	var globalHelpers = [helper,helperLabel,averageHelper];
			    var helpers = getAll('helper');
			    var labels = getAll('label');
			    var emojis = getAll('emoji');
			  	var tooltips = getAll('tooltip');
			  	var emojiNames = makeAllAsObject('emoji');
			  	var labelNames = makeAllAsObject('label');
			  	var textHelperNames = makeAllAsObject('helper');
			  	var logoNames = makeAllAsObject('logo');
			  	var logos = getAll('logo');

			  	function loopDisplay(array,state){
			  		for (q=0;q<array.length;q++){
				      	array[q].style('display', state);
				    }
			  	}

			    var mouseArea = focus.append('g')
			    	.attr('class', 'chart__mouse')
			    	.append('rect')
			      	.attr('class', 'chart__overlay')
			      	.attr('width', width)
			      	.attr('height', height)
			      	// .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')
			      	.on('mouseover', function() {

			      		d3.select(".chart__subtitle").style('display', 'none');

			      		// focusGraph.style('display', null);
			      		helper.style('display', null);
				      	helperLabel.style('display', null);
				      	allObjects['average']['helper'].style('display', null);
				      	loopDisplay(helpers,null);
				      	loopDisplay(tooltips,null);
				      	loopDisplay(emojis,null);
				      	loopDisplay(logos,null);
				      	loopDisplay(labels,null);
				      	allObjects['average']['logo'].style('display', 'none');

			      	})
			      	.on('mouseout', function() {
			      		d3.select(".chart__subtitle").style('display', null);

			     		// focusGraph.style('display', 'none');
			     		helper.style('display', 'none');
				      	helperLabel.style('display', 'none');
				      	allObjects['average']['helper'].style('display', 'none');
				        loopDisplay(helpers,'none');
				      	loopDisplay(tooltips,'none');
				      	loopDisplay(emojis,'none');
				      	loopDisplay(logos,'none');
				      	loopDisplay(labels,'none');
			      	})
			      	.on('mousemove', mousemove);
			      // .call(d3.behavior.zoom()
			      //  	.scaleExtent([1, 10])
			      //  	.on("zoom", function () {
				    	// 	focus.attr("transform", 
				    	// 		"translate(" + d3.event.translate + ")" 
				    	// 		+ " scale(" + d3.event.scale + ",1)"
				    	// 		)}));


			    function mousemove() {

				      var x0 = x.invert(d3.mouse(this)[0]);
				      var i = bisectDateNew(data, x0, 1);
				      var d0 = data[i - 1];
				      var d1 = data[i];
				      var d = x0 - parseDateNew(d0.date) > parseDateNew(d1.date) - x0 ? d1 : d0;

				      helperText.text(legendFormat(new Date(parseDateNew(d.date))));

				      reorderLabels(d);
				      applyNewTextValues();
				      applyNewToolTipValues();
				       
				      function roundNeatly(number){
				      	return number < 0 ? number-(1+(number%2)) : number+(1-(number%2));
				      }

				      function reorderLabels(d){

				      		function makeNewEmoji(name){

				      			var emojiKeys = Object.keys(allSmileys).map(function(a){return parseInt(a);});

				      			var emojiScore;
				      			var neutralKey = emojiKeys[0],  smileyKey = emojiKeys[1], sadKey = emojiKeys[2],angryKey = emojiKeys[3], deathKey = emojiKeys[4];
				      		
				      			var paperScore = parseFloat(d[name]);

								switch (true) {
								    case (paperScore >= ((smileyKey+neutralKey)/2)):
										emojiScore = smileyKey.toString();
								        break;
								    case (paperScore >= ((neutralKey+sadKey)/2)):
								    	emojiScore = neutralKey.toString();
								        break;
								    case (paperScore > ((sadKey+angryKey)/2)):
								    	emojiScore = sadKey.toString();
								        break;
								    case (paperScore > ((angryKey+deathKey)/2)):
								    	emojiScore = angryKey.toString();
								        break;

								    case (paperScore <= ((angryKey+deathKey)/2)):
								    	emojiScore = deathKey.toString();
								        break;			       
								}

							   emojiNames[name].append("image")
							  .attr({"xlink:href": allSmileys[emojiScore],
							         "width": 20,
							         "height": 20,
							         "transform":"translate(-25, -15)"
							        });
							}

					      	
					      	// keysSorted = Object.keys(d);
				      		// keysSorted = allPapers;
				      		var keysSorted = getAllValidObjectKeysFrom2Arrays(Object.keys(d),allPapers);
				      		keysSorted.splice(-1,1); // remove "average" value from sorted list
				      		keysSorted.sort(function(a,b){return d[a]-d[b]});
				      		// keysSorted.shift();// remove "date" value from sorted list
				      		

						    for (w = 0;w<keysSorted.length;w++){ 
						      		var paper =  keysSorted[w];
						      		// var textBoxX = x(parseDateNew(d.date));
						      		var textBoxX = width + 30;
						      		var averageTextBoxX = width;
						      		var textBoxY = ((w+2)*25)+20;
						      		// var averageTextBoxX = x(parseDateNew(d.date))+100;
						      		var averageTextBoxY = 25+20;
						      		var tbOffset = -20;

						      		changePositions(paper,textBoxX,textBoxY,tbOffset);
						      		changePositions('average',textBoxX,averageTextBoxY,tbOffset);
						      	}
						      	makeNewEmoji('average');
			      	  }

			      	  function getAllValidObjectKeysFrom2Arrays(largerArr,smallerArr){
					      		return largerArr.filter(function(n) {
								    return smallerArr.indexOf(n) != -1;
								});
					      	} ;

			      	  function changePositions(paper,x,y,offset){
				      			textHelperNames[paper].attr('transform', 'translate(' + parseInt(x-150-offset) + ',' + y + ' )');
						      	emojiNames[paper].attr('transform', 'translate(' + parseInt(x-185-offset) + ',' + y + ' )');
						      	// labelNames[paper].attr('transform', 'translate(' + parseInt(x-40-offset) + ',' + y + ' )');
						      	labelNames['average'].attr('transform', 'translate(' + parseInt(x-70-offset) + ',' + y + ' )');
						      	logoNames[paper].attr('transform', 'translate(' + parseInt(x-120-offset) + ',' + (y-37) + ' )');
				      }
			 
			      	  function applyNewTextValues(){
				      		for (var prop in allObjects){
				      			var rounded = myMath.round(parseFloat(d[prop]),1);
				      			allObjects[prop]['text'].text(rounded);
				      		
				      		}
				      }

				      function applyNewToolTipValues(){
				      		for (var prop in allObjects){
				      			allObjects[prop]['tooltip'].attr('transform', 'translate(' + x(parseDateNew(d.date)) + ',' + y(d[prop]) + ')');
				      		}
				      }
				  }

			    function brushed() {
				      var ext = brush.extent();
				      if (!brush.empty()) {
				        x.domain(brush.empty() ? x2.domain() : brush.extent());
				        y.domain([
				          d3.min(data.map(function(d) { return (d.date >= ext[0] && d.date <= ext[1]) ? d.average : max; })),
				          d3.max(data.map(function(d) { return (d.date >= ext[0] && d.date <= ext[1]) ? d.average : min; }))
				        ]);
				        range.text(legendFormat(new Date(ext[0])) + ' - ' + legendFormat(new Date(ext[1])));

				       
				      }

				      var allObjectKeys = Object.keys(allObjects);
				     

				      for (var u=0;u<allObjectKeys.length; u++) {

				      	var objItem = allObjects[allObjectKeys[u]];
				      	 console.log(objItem['chart']);
				      	objItem['chart'].attr('d', objItem['line']);
				     
				      }
				 
				      focus.select('.x.axis').call(xAxis);
				      focus.select('.y.axis').call(yAxis);
				    }

			    function resize() {
				  /* Update graph using new width and height (code below) */
				  /* Find the new window dimensions */
					var width = $(window).width(),
					height = $(window).height();
					 
					/* Update the range of the scale with new width/height */
					x.range([0, width]).nice();
					y.range([height, min]).nice();

					/* Update the axis with the new scale */
					focus.select('x axis')
					  .attr("transform", "translate(0," + height + ")")
					  .call(xAxis);
					 
					focus.select('y axis')
					  .call(yAxis);
					 
					 // Force D3 to recalculate and update the line 
					 for (var h=0;h<charts.length;h++){
					 		charts[h].attr("d", lines[h]);
					 }	
				}

			 // d3.select(window).on('resize', resize); 	  	
	};// end drawData

	
	function logMe(e){console.log(e);}


}());</script>