<nav>
	<a href="/"><-</a>
<!-- 	<h2>What Not To Read</h2> -->
	 <p>This project analyses Britain's main respectable newspapers for their mood. It is an attempt to show which papers might be bad for your health. <br/>To find out more about the methodology, click <strong><a id="showmethods" href="#">here</a></strong>  </p>
</nav>
<div id='side'>
	<h2 id='showside'>See Awards</h2>
	  <div id='champion_neg'>

	  	<p class='neg_award_headline'>Misery Guts story of the month award</p>
	  	<h3>with a score of </h3>
	  	<span class='score_award'><%=@story_neg.mixed %></span>
	  	<h2> The <%= @story_neg.source %></h2>
	  	<div class='cup'></div>
	  	<h3><em><%= @story_neg.title %></em></h3>
	  	<h4><%= @story_neg.date.strftime('%x') %></h4>
	  	<button id='to_pos_award' class="myButton"> >> </button>
	  	
	  </div>
	   <div id='champion_pos'>
	   	
	  	<p class='pos_award_headline'>Happy Larry story of the month award</p>
	  	<h3>with a score of </h3>
	  	<span class='score_award'><%=@story_pos.mixed %></span>
	  	<h2> The <%= @story_pos.source %></h2>
	  	<div class='cup'></div>
	  	<h3><em><%= @story_pos.title %></em></h3>
	  	<h4><%= @story_pos.date.strftime('%x') %></h4>
	  	<button id='to_neg_award' class="myButton"> << </button>
	  	
	  </div>
</div>

<div id='info'>
	<div id='blurb'>
		<h3>Why?</h3>
		<p>"It's good to stay informed" is a platitude I grew up on. I turn to the Guardian online several times a day to kill spare moments. But what does this do to my mood? Apart from the story itself, what other information am I getting? This project is a humble attempt to find out.</p>
		<h3>How?</h3>
		<p>
			Once every hour, we take the RSS feed from Britain's 'top' newspapers, and run the first ten headlines through sentiment analysis to see how they score. Stories are assessed for 'positivity' or 'negativity', according to two sentiment analysis dictionaries, AFINN and MPQA.</p>
			<p>Each word in the headline is given a score, according to its strength or weakness, such as 'charming': +3; 'terrifying': -3, and each headline score is added together, and then averaged out across all ten stories. </p>

		<p>Three different tools were tested, and manually assessed to check efficacy (click for more info): </p>
		<ol>
			<li><a href="http://www2.imm.dtu.dk/pubdb/views/publication_details.php?id=6010" target="_blank">AFINN-111</a></li>
		<li><a href="http://mpqa.cs.pitt.edu/lexicons/subj_lexicon/" target="_blank">MPQA Subjectivity Lexicon</a></li>
		<li><a href="https://github.com/malavbhavsar/sentimentalizer" target="_blank">Naive Bayes Classifier (Sentimentalizer)</a> </li>
	</ol>

		<p>In the first test, sixty headlines were checked against the three tools. Ultimately, sentiment analysis is a rather subjective exercise, so I went down the list of scores and picked out the stories <em>I </em> thought were particularly offensive, and compared the scores. The full csv of initial data for comparison is <a href="https://www.dropbox.com/s/tngc6yqcff9ylve/rss2mixed.csv?dl=1">here</a> (key: Wiebe-MPQA, Sent-Naive Classifier). Taken alone, Wiebe and AFINN got the score badly wrong (ie weren't offended by something I found grossly offensive, or were offended by something harmless) around 20% of the time, but averaged together, the rate dropped dramatically in the test data. </p>


		<h3>Can I hack it?</h3>
		<p>Sure you can, fork it over on <a href="https://github.com/Lemez/serenity-padrino" target="_blank">Github</a> .</p>
	</div>
</div>


<script> 
/* global d3, _ */

$('#showmethods').on('click',function(){
	$('#info').slideDown(1000);
});

$('#info').on('click',function(){
	$(this).slideUp(1000);
});

$('#showside').on('click',function(){
	$('#champion_neg').animate({left:'2%'},300).show();
	$(this).hide();
});

$('button#to_pos_award').on('click',function(){
        $('#champion_neg').animate({left:'1000px'},300).hide();
         $('#champion_pos').animate({left:'2%'},300).show();
});

$('button#to_neg_award').on('click',function(){
	 $('#champion_pos').animate({left:'1000px'},300).hide();
         $('#champion_neg').animate({left:'2%'},300).show();
});





(function() {

	var helper,helperLabel,mailLine,mailChart,mailLabel,mailHelper,mailTooltip,mailText,mailLabelText,
	expressLine,expressChart,expressLabel,expressHelper,expressTooltip,expressText,expressLabelText,
	guardianLine,guardianChart,guardianLabel,guardianHelper,guardianTooltip,guardianText,guardianLabelText,
	independentLine,independentChart,independentLabel,independentHelper,independentTooltip,independentText,independentLabelText,
	telegraphLine,telegraphChart,telegraphLabel,telegraphHelper,telegraphTooltip,telegraphText,telegraphLabelText,
	timesLine,timesChart,timesLabel,timesHelper,timesTooltip,timesText,timesLabelText,averageLine,averageChart,averageLabel,averageHelper,averageTooltip,averageText,averageLabelText;

	var allPapers=['express','guardian','independent','mail','telegraph','times'];

     function type(d) {

	    return {
	      date    : parseDate(d.Date),
	      guardian   : d.Guardian,
	      mail   : d.Mail,
	      express   : d.Express,
	      telegraph   : d.Telegraph,
	      independent   : d.Independent,
	      times   : d.Times,
	      average : Math.round(((parseInt(d.Times)+parseInt(d.Independent)+parseInt(d.Telegraph)+parseInt(d.Express)+parseInt(d.Mail)+parseInt(d.Guardian))/6) * 10 ) / 10
	    }
  }
   
	var windowW = $(window).width();
	var windowH = $(window).height();
	var windowM = windowW/8;
  	var margin = {top: 230, right: windowM, bottom: 100, left: windowM};
  	var margin2  = {top: 410, right: 100, bottom: 100, left: 100};
  	var width    = windowW - margin.left - margin.right;
  	var height   = windowH - margin.top - margin.bottom;
  	var height2  = windowH - margin2.top - margin2.bottom;
    var x = d3.time.scale().range([0, width]);
    var x2  = d3.time.scale().range([0, width]);
    var y = d3.scale.linear().range([height, 0]);
    var y1  = d3.scale.linear().range([height, 0]);
    var y2  = d3.scale.linear().range([height2, 0]);
    var y3  = d3.scale.linear().range([800, 0]);
  	var parseDate = d3.time.format('%X-%d/%m/%Y').parse;
    var bisectDate = d3.bisector(function(d) { return d.date; }).left;
    var legendFormat = d3.time.format('%b %d, %Y');
    var timeFormat = d3.time.format('%H:00 ');
  	var xAxis = d3.svg.axis().scale(x).ticks(4).tickFormat(d3.time.format("%a %d/%m")).orient('bottom');
    var xAxis2  = d3.svg.axis().scale(x2).orient('bottom');
    var yAxis   = d3.svg.axis().scale(y).orient('left');

  	var svg = d3.select('body').append('svg')
	    .attr('class', 'chart')
	    .attr('width', width + margin.right + 10)
	    .attr('height', height + margin.top + margin.bottom );

  	var focus = svg.append('g')
    	.attr('class', 'focus')
    	.attr('width', width + 10)
    	.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

    var legend = svg.append('g')
   	 .attr('width', width)
   	 .attr('height', 30)
   	 .attr('transform', 'translate(' + margin2.left + ', 20)')
   	 .append('text')
     .attr('class', 'chart__title')
     .text('BRITISH NEWSPAPER NEGATIVITY INDEX')

     var subLegend = svg.append('g')
   	 .attr('class', 'chart__subtitle')
   	 .attr('width', width)
   	 .attr('height', 30)
   	 .attr('transform', 'translate(' + margin2.left + ', 60)')
   	 .append('text')
     .attr('class', 'chart__symbol')
     .text('Hover for details')

       	// svg.append('defs').append('clipPath')
	  //   .attr('id', 'clip')
	  // 	.append('rect')
	  //   .attr('width', width)
	  //   .attr('height', height);

  	// var barsGroup = svg.append('g')
   // 	 .attr('class', 'volume')
   // 	 .attr('clip-path', 'url(#clip)')
   // 	 .attr('transform', 'translate(' + margin.left + ',50)');

 	 // var context = svg.append('g')
 	 //  	 .attr('class', 'context')
 	 //  	 .attr('transform', 'translate(' + margin2.left + ',' + (margin2.top + 60) + ')');


  	// var rangeSelection =  legend
   // 	 .append('g')
   // 	 .attr('class', 'chart__range-selection')
   // 	 .attr('transform', 'translate(110, 0)');

  	d3.csv('https://dl.dropboxusercontent.com/u/2448084/papers_production.csv', type, function(err, data) {

  		// var brush = d3.svg.brush().x(x2).on('brush', brushed);

	    function addMinutes(date, minutes) {
		    return new Date(date.getTime() + minutes*60000);
		}

	    var xRange = d3.extent(data.map(function(d) { return d.date; }));
	    var minDate = xRange[0];

	    // add 3 mins to  last date to make it play nice with bars
	    var maxDate = addMinutes(xRange[1],3);
	    var allValues = [].concat(
	    		data.map(function (d) {return (d.guardian);}), 
	    		data.map(function (d) {return (d.mail);}),
	    		data.map(function (d) {return (d.independent);}),
	    		data.map(function (d) {return (d.telegraph);}),
	    		data.map(function (d) {return (d.express);}),
	    		data.map(function (d) {return (d.times);})
	    		);

	    var min = Math.min.apply(null, allValues),
	    max = Math.max.apply(null, allValues);
	    y.range([height, min]);
	    y.domain([max+1,min-1]);
	    x.domain([minDate,maxDate]);
	    x2.domain(x.domain());
	    y2.domain(y.domain());
	    y3.domain(d3.extent(allValues));

	  	// var area2 = d3.svg.area()
				// .interpolate('monotone')
				// .x(function(d) { return x2(d.date); })
				// .y0(height2)
				// .y1(function(d) { return y2(d.guardian); });

	    // var range = legend.append('text')
	    //   .text(legendFormat(new Date(xRange[0])) + ' - ' + legendFormat(new Date(xRange[1])))
	    //   .style('text-anchor', 'end')
	    //   .attr('transform', 'translate(' + width + ', 0)');

	    var make_y_axis = function () {
	    return d3.svg.axis()
	      .scale(y)
	      .orient('left')
	      .ticks(3);
	  };

	    focus.append('g')
	        .attr('class', 'y chart__grid')
	        .call(make_y_axis()
	        .tickSize(-width, 0, 0)
	        .tickFormat(''));

	    focus.append('g')
	        .attr('class', 'x axis x-responsive')
	        .attr('transform', 'translate(0 ,' + height + ')')
	        .call(xAxis);

	    focus.append('g')
	        .attr('class', 'y axis smiley_ticks_helper')
	        .attr('transform', 'translate(-5, 0)')
	        .call(yAxis);

	    var yAxisSmileys   = d3.svg.axis().scale(y).orient('left').ticks(4).orient("left");

	    // focus.append('g')
	    //     .attr('class', ' y axis ')
	    //     .attr('transform', 'translate(-40, 0)')
	    //     .call(yAxisSmileys);

	   var allSmileys={
	    	'2':  'http://blog.openconnection.com/wp-content/uploads/2015/04/closed-eyes-smiley.png',
	    	'0': 'http://afv.com/wp-content/uploads/2014/11/Neutral.png',
	    	'-2':  'http://vaks.in/wp-content/uploads/2012/07/e416.png',
	    	'-4':  'http://www.clipartbest.com/cliparts/aie/xnR/aiexnR4i4.png',
	    	'-6': 'https://image.freepik.com/free-photo/evil-bad-emoticon_318-40219.jpg'
	    }

	    focus.select(".smiley_ticks_helper").selectAll(".tick").each(function(d,i) {
			  d3.select(this).append("image").attr({"xlink:href": allSmileys[d.toString()],
			         "width": 25,
			         "height": 25,
			         "transform":"translate(-45, -10)"
			        })
			});


	    // var focusGraph = barsGroup.selectAll('rect')
	    //     .data(data)
	    //   	.enter().append('rect')
	    //     .attr('class', 'chart__bars')
	    //     .attr('x', function(d, i) { return x(d.date)+i*1000; })
	    //     // .attr('y', function(d) { return 0 + y3(d.min); })
	    //     .attr('y',0)
	    //     .attr('width', 1)
	    //     .attr('height', function(d) { return 500; })
	    //     // .attr('height', 300)
	    //     .style('display', 'none');


	   // LINES
	    function makeLine(name){
			   return d3.svg.line()
			    .interpolate('monotone')
			    .x(function(d) { return x(d.date); })
			    .y(function(d) { return y(d[name]); });
	    }

	    expressLine =  makeLine('express');
	  	guardianLine = makeLine('guardian');
	  	independentLine =  makeLine('independent');
	  	mailLine =  makeLine('mail');
	  	telegraphLine =  makeLine('telegraph');
	  	timesLine =  makeLine('times');
	  	averageLine = makeLine('average');

	  	var allObjects = {
        	'express' : {
        		'chartclass' : 'chart__express--focus',
        		'line' : expressLine,
        		'chart' : expressChart,
        		'label' : expressLabel,
        		'helper': expressHelper,
        		'tooltip': expressTooltip,
        		'tooltipclass' : 'chart__tooltip--express',
        		'text': expressText,
        		'labelText': expressLabelText
        	},

        	'guardian' : {
        		'chartclass' : 'chart__guardian--focus',
        		'line' : guardianLine,
        		'chart' : guardianChart,
        		'label' : guardianLabel,
        		'helper': guardianHelper,
        		'tooltip': guardianTooltip,
        		'tooltipclass' : 'chart__tooltip--guardian',
        		'text': guardianText,
        		'labelText': guardianLabelText
        	},
        		'independent' : {
        		'chartclass' : 'chart__independent--focus',
        		'line' : independentLine,
        		'chart' : independentChart,
        		'label' : independentLabel,
        		'helper': independentHelper,
        		'tooltip': independentTooltip,
        		'tooltipclass' : 'chart__tooltip--independent',
        		'text': independentText,
        		'labelText': independentLabelText
        	},

        	'mail' : {
        		'chartclass' : 'chart__mail--focus',
        		'line' : mailLine,
        		'chart' : mailChart,
        		'label' : mailLabel,
        		'helper': mailHelper,
        		'tooltip': mailTooltip,
        		'tooltipclass' : 'chart__tooltip--mail',
        		'text': mailText,
        		'labelText': mailLabelText
        	},

        	'telegraph' : {
        		'chartclass' : 'chart__telegraph--focus',
        		'line' : telegraphLine,
        		'chart' : telegraphChart,
        		'label' : telegraphLabel,
        		'helper': telegraphHelper,
        		'tooltip': telegraphTooltip,
        		'tooltipclass' : 'chart__tooltip--telegraph',
        		'text': telegraphText,
        		'labelText': telegraphLabelText
        	},

        		'times' : {
        		'chartclass' : 'chart__times--focus',
        		'line' : timesLine,
        		'chart' : timesChart,
        		'label' : timesLabel,
        		'helper': timesHelper,
        		'tooltip': timesTooltip,
        		'tooltipclass' : 'chart__tooltip--times',
        		'text': timesText,
        		'labelText': timesLabelText
        	},
        	'average' : {
        		'chartclass' : 'chart__average--focus',
        		'line' : averageLine,
        		'chart' : averageChart,
        		'label' : averageLabel,
        		'helper': averageHelper,
        		'tooltip': averageTooltip,
        		'tooltipclass' : 'chart__tooltip--average',
        		'text': averageText,
        		'labelText': averageLabelText
        	}
        }

	  	// CHARTS
	  	function makeChart(name){

	    	return focus.append('path')
	        .datum(data)
	        .attr('class', 'chart__line line ' + allObjects[name]['chartclass'])
	        .attr('d', allObjects[name]['line']);
	    }

      	expressChart =  makeChart('express');
	  	guardianChart = makeChart('guardian');
	  	independentChart =  makeChart('independent');
	  	mailChart =  makeChart('mail');
	  	telegraphChart =  makeChart('telegraph');
	  	timesChart =  makeChart('times');
	  	averageChart =  makeChart('average');

		// LABELS
		function makeLabel(name){
	    	return svg.append('g')
	      .attr('class', 'chart__helper')
	      .style('text-anchor', 'end')
	      .attr('class', name);
	    }

		expressLabel =  makeLabel('express');
		guardianLabel = makeLabel('guardian');
		independentLabel =  makeLabel('independent');
		mailLabel =  makeLabel('mail');
		telegraphLabel =  makeLabel('telegraph');
		timesLabel =  makeLabel('times');
		averageLabel =  makeLabel('average');

		// set up original legend display
		var labels = [expressLabel,guardianLabel,independentLabel,mailLabel,telegraphLabel,timesLabel,averageLabel];

		for (p=0;p<labels.length;p++){
			labels[p].attr('transform', 'translate(' + margin.left + ',' + (p+5)*20 + ' )');
		}

		// HELPERS
		function makeHelper(name){
	    	return svg.append('g')
	      .attr('class', 'chart__helper')
	      .style('text-anchor', 'end')
	      .style('display', null)
	      .attr('class', name);
	    }

	    var labelx = parseInt(width-70+margin.left);

	    helper = svg.append('g')
	      .attr('class', 'chart__helper')
	      .style('text-anchor', 'end')
	      .style('font-size', '14px')
	      .attr('transform', 'translate(' + labelx + ', 15)');

	    helperLabel = svg.append('g')
	      .attr('class', 'chart__helper')
	      .style('text-anchor', 'end')
	      .style('font-size', '14px')
	      .attr('transform', 'translate(' + parseInt(width+margin.left) + ', 15)');

	    expressHelper =  makeHelper('express');
	    guardianHelper = makeHelper('guardian');
	    independentHelper =  makeHelper('independent');
	    mailHelper =  makeHelper('mail');
	    telegraphHelper =  makeHelper('telegraph');
	    timesHelper =  makeHelper('times');
	    averageHelper =  makeHelper('average');

	    var globalHelpers = [helper,helperLabel,averageHelper];
	    var helpers = [timesHelper,independentHelper,guardianHelper,mailHelper,telegraphHelper,expressHelper];

	    helperText = helper.append('text').attr('class', 'indented_details');
	    mailText = mailHelper.append('text').attr('class', 'indented_details');
	    guardianText = guardianHelper.append('text').attr('class', 'indented_details');
	    expressText = expressHelper.append('text').attr('class', 'indented_details');
	    independentText = independentHelper.append('text').attr('class', 'indented_details');
	    timesText = timesHelper.append('text').attr('class', 'indented_details');
	    telegraphText = telegraphHelper.append('text').attr('class', 'indented_details');
	    averageText = averageHelper.append('text').attr('class', 'indented_details');

	    helperLabelText = helperLabel.append('text').attr('class', 'indented_details');
	    mailLabelText = mailLabel.append('text').attr('class', 'indented_details');
	    guardianLabelText = guardianLabel.append('text').attr('class', 'indented_details');
	    expressLabelText = expressLabel.append('text').attr('class', 'indented_details');
	    independentLabelText = independentLabel.append('text').attr('class', 'indented_details');
	    timesLabelText = timesLabel.append('text').attr('class', 'indented_details');
	    telegraphLabelText = telegraphLabel.append('text').attr('class', 'indented_details');
	    averageLabelText = averageLabel.append('text').attr('class', 'indented_details');

	    guardianLabelText.text("Guardian");
	    mailLabelText.text("Mail");
	    expressLabelText.text("Express");
	    independentLabelText.text("Independent");
	    timesLabelText.text("Times");
	    telegraphLabelText.text("Telegraph");
	    averageLabelText.text("average");

	    function makeEmoji(name){
	    	return svg.append('g')
	      .attr('class', 'emoji')
	      .style('text-anchor', 'end')
	      .attr('class', name);
	    }

	    expressEmoji =  makeEmoji('express');
	    guardianEmoji = makeEmoji('guardian');
	    independentEmoji =  makeEmoji('independent');
	    mailEmoji =  makeEmoji('mail');
	    telegraphEmoji =  makeEmoji('telegraph');
	    timesEmoji =  makeEmoji('times');
	    averageEmoji =  makeEmoji('average');

	    var emojis = [timesEmoji,independentEmoji,guardianEmoji,mailEmoji,telegraphEmoji,expressEmoji];

	    mailEmojiText = mailEmoji.append('text').attr('class', 'indented_details');
	    guardianEmojiText = guardianEmoji.append('text').attr('class', 'indented_details');
	    expressEmojiText = expressEmoji.append('text').attr('class', 'indented_details');
	    independentEmojiText = independentEmoji.append('text').attr('class', 'indented_details');
	    timesEmojiText = timesEmoji.append('text').attr('class', 'indented_details');
	    telegraphEmojiText = telegraphEmoji.append('text').attr('class', 'indented_details');
	    averageEmojiText = averageEmoji.append('text').attr('class', 'indented_details');

 		function makeTooltip(name){
	    	return focus.append('g')
	      .attr('class', allObjects[name]['tooltipclass'])
	      .append('circle')
	      .style('display', 'none')
	      .attr('r', 2.5)
	      .attr('class', name)
	      .style("fill", "white")
	      .style("stroke-width","3");
	    }

	   	expressTooltip =  makeTooltip('express');
	  	guardianTooltip = makeTooltip('guardian');
	  	independentTooltip =  makeTooltip('independent');
	  	mailTooltip =  makeTooltip('mail');
	  	telegraphTooltip =  makeTooltip('telegraph');
	  	timesTooltip =  makeTooltip('times');
	  	averageTooltip =  makeTooltip('average');

	  	averageTooltip.attr('r', 5);

	  	var tooltips = [timesTooltip,independentTooltip,guardianTooltip,mailTooltip,telegraphTooltip,expressTooltip,averageTooltip];

	    var mouseArea = svg.append('g')
	      .attr('class', 'chart__mouse')
	      .append('rect')
	      .attr('class', 'chart__overlay')
	      .attr('width', width)
	      .attr('height', height)
	      .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')
	      .on('mouseover', function() {

	      		 // focusGraph.style('display', null);
	      		globalHelpers[0].style('display', null);
		      	globalHelpers[1].style('display', null);
		      	globalHelpers[2].style('display', null);

		      	for (q=0;q<helpers.length;q++){
		      		helpers[q].style('display', null);
		      	}

		      	for (k=0;k<tooltips.length;k++){
		      		tooltips[k].style('display', null);
		      	}

		      	for (t=0;t<emojis.length;t++){
		      		emojis[t].style('display', null);
		      	}

		    
	      })
	      .on('mouseout', function() {

	     		// focusGraph.style('display', 'none');
	     		globalHelpers[0].style('display', 'none');
		      	globalHelpers[1].style('display', 'none');
		      	globalHelpers[2].style('display', 'none');


	        	for (r=0;r<helpers.length;r++){
		      		helpers[r].style('display', 'none');
		      	}    	  
		      	for (w=0;w<tooltips.length;w++){
		      		tooltips[w].style('display', 'none');
		      	}

		      	for (t=0;t<emojis.length;t++){
		      		emojis[t].style('display', 'none');
		      	}
	      })
	      .on('mousemove', mousemove);

	    // context.append('path')
	    //     .datum(data)
	    //     .attr('class', 'chart__area area')
	    //     .attr('d', area2);

	    // context.append('g')
	    //     .attr('class', 'x axis chart__axis--context')
	    //     .attr('y', 0)
	    //     .attr('transform', 'translate(0,' + (height2 - 22) + ')')
	    //     .call(xAxis2);

	    // context.append('g')
	    //     .attr('class', 'x brush')
	    //     .call(brush)
	    //   .selectAll('rect')
	    //     .attr('y', -6)
	    //     .attr('height', height2 + 7);


	    function mousemove() {

		      var x0 = x.invert(d3.mouse(this)[0]);
		      var i = bisectDate(data, x0, 1);
		      var d0 = data[i - 1];
		      var d1 = data[i];
		      var d = x0 - d0.date > d1.date - x0 ? d1 : d0;

		      // helperText.text(legendFormat(new Date(d.date)));
		      // helperLabelText.text(timeFormat(new Date(d.date)));




		      function reorderLabels(d){

		      		var emojiNames = {'express':expressEmoji, 'guardian':guardianEmoji,'independent':independentEmoji,'mail':mailEmoji,'telegraph':telegraphEmoji,'times':timesEmoji, 'average':averageEmoji};

		      		

		      		function makeEmoji(name){

		      			var emojiKeys = Object.keys(allSmileys).map(function(a){return parseInt(a);});

		      			var emojiScore;
		      			var neutralKey = emojiKeys[0],  smileyKey = emojiKeys[1], sadKey = emojiKeys[2],angryKey = emojiKeys[3], deathKey = emojiKeys[4];
		      		

		      			function roundNeatly(number){

		      				return number < 0 ? number-(1+(number%2)) : number+(1-(number%2));
		      			}

		      			var paperScore = parseFloat(d[name]);
		      			// condition = Math.abs(paperScore)%2>1;

		      			// if (condition) {paperScore=roundNeatly(paperScore);}

						switch (true) {
						    case (paperScore >= ((smileyKey+neutralKey)/2)):
								emojiScore = smileyKey.toString();
						        break;
						    case (paperScore >= ((neutralKey+sadKey)/2)):
						    	emojiScore = neutralKey.toString();
						        break;
						    case (paperScore > ((sadKey+angryKey)/2)):
						    	emojiScore = sadKey.toString();
						        break;
						    case (paperScore > ((angryKey+deathKey)/2)):
						    	emojiScore = angryKey.toString();
						        break;

						    case (paperScore <= ((angryKey+deathKey)/2)):
						    	emojiScore = deathKey.toString();
						        break;			       
						}

						console.log(name,paperScore,emojiScore);

					   emojiNames[name].append("image")
					  .attr({"xlink:href": allSmileys[emojiScore],
					         "width": 20,
					         "height": 20,
					         "transform":"translate(-25, -15)"
					        });
					}

			      	var labelNames = {'express':expressLabel, 'guardian':guardianLabel,'independent':independentLabel,'mail':mailLabel,'telegraph':telegraphLabel,'times':timesLabel, 'average':averageLabel};
			      	var textHelperNames = {'express':expressHelper, 'guardian':guardianHelper,'independent':independentHelper,'mail':mailHelper,'telegraph':telegraphHelper,'times':timesHelper, 'average':averageHelper};
			      

			      		keysSorted = Object.keys(d);
			      		//keysSorted.splice(-1,1); // remove "average" value from sorted list
			      		keysSorted.sort(function(a,b){return d[a]-d[b]});
			      		keysSorted.splice(-1,1);

			   			 
				    for (w = 0;w<keysSorted.length;w++){ 
				      		var paper =  keysSorted[w];
				      		var textBoxX = x(d.date)+180;
				      		if (textBoxX>width){textBoxX=width;}
			      			if (textBoxX<200){textBoxX=200;}

				      		var textBoxY = ((w+2)*25)+40;
				      		labelNames[paper].attr('transform', 'translate(' + textBoxX + ',' + textBoxY + ' )');
				      		textHelperNames[paper].attr('transform', 'translate(' + parseInt(textBoxX+100) + ',' + textBoxY + ' )');
				      		emojiNames[paper].attr('transform', 'translate(' + parseInt(textBoxX+50) + ',' + textBoxY + ' )');

				      		makeEmoji(paper);

				      	}
	      	  }

		      reorderLabels(d);

		      // averageLabel.attr('transform', 'translate(' + labelx + ',200)');
		      // averageHelper.attr('transform', 'translate(' + parseInt(width+margin.left) + ',200)');

			  guardianText.text(d.guardian);
		      mailText.text(d.mail);
		      expressText.text(d.express);
		      independentText.text(d.independent);
		      timesText.text(d.times);
		      telegraphText.text(d.telegraph);
		      averageText.text(d.average);

		      // focusGraph.attr('transform', 'translate(' + x(d.date) + ',' + 0 + ')');
		      guardianTooltip.attr('transform', 'translate(' + x(d.date) + ',' + y(d.guardian) + ')');
		      mailTooltip.attr('transform', 'translate(' + x(d.date) + ',' + y(d.mail) + ')');
		      expressTooltip.attr('transform', 'translate(' + x(d.date) + ',' + y(d.express) + ')');
		      independentTooltip.attr('transform', 'translate(' + x(d.date) + ',' + y(d.independent) + ')');
		      timesTooltip.attr('transform', 'translate(' + x(d.date) + ',' + y(d.times) + ')');
		      telegraphTooltip.attr('transform', 'translate(' + x(d.date) + ',' + y(d.telegraph) + ')'); 
		      averageTooltip.attr('transform', 'translate(' + x(d.date) + ',' + y(d.average) + ')'); 

	    }

	    // function brushed() {
	    //   var ext = brush.extent();
	    //   if (!brush.empty()) {
	    //     x.domain(brush.empty() ? x2.domain() : brush.extent());
	    //     y.domain([
	    //       d3.min(data.map(function(d) { return (d.date >= ext[0] && d.date <= ext[1]) ? d.guardian : max; })),
	    //       d3.max(data.map(function(d) { return (d.date >= ext[0] && d.date <= ext[1]) ? d.guardian : min; }))
	    //     ]);
	    //     // range.text(legendFormat(new Date(ext[0])) + ' - ' + legendFormat(new Date(ext[1])))
	    //     focusGraph.attr('x', function(d, i) { return x(d.date); });

	    //     // var days = Math.ceil((ext[1] - ext[0]) / (24 * 3600 * 1000))
	    //     focusGraph.attr('width', (40 > days) ? (40 - days) * 5 / 6 : 5)
	    //   }

	    //   guardianChart.attr('d', GuardianLine);
	    //   timesChart.attr('d', TimesLine);
	    //   mailChart.attr('d', MailLine);
	    //   expressChart.attr('d', ExpressLine);
	    //   telegraphChart.attr('d', TelegraphLine);
	    //   independentChart.attr('d', IndependentLine);
	    //   focus.select('.x.axis').call(xAxis);
	    //   focus.select('.y.axis').call(yAxis);
	    // }

	    // var dateRange = ['1w', '1m', '1y'];
	    // for (var i = 0, l = dateRange.length; i < l; i ++) {
	    //   var v = dateRange[i];
	    //   rangeSelection
	    //     .append('text')
	    //     .attr('class', 'chart__range-selection')
	    //     .text(v)
	    //     .attr('transform', 'translate(' + (18 * i) + ', 0)')
	    //     .on('click', function(d) { focusOnRange(this.textContent); });
	    // }

	    function resize() {
		  /* Update graph using new width and height (code below) */
		  /* Find the new window dimensions */
			var width = $(window).width(),
			height = $(window).height();
			 
			/* Update the range of the scale with new width/height */
			x.range([0, width]).nice();
			y.range([height, min]).nice();

			/* Update the axis with the new scale */
			focus.select('x axis')
			  .attr("transform", "translate(0," + height + ")")
			  .call(xAxis);
			 
			focus.select('y axis')
			  .call(yAxis);
			 
			 // Force D3 to recalculate and update the line 
			 for (var h=0;h<charts.length;h++){
			 		charts[h].attr("d", lines[h]);
			 }	
		}


	 // d3.select(window).on('resize', resize); 


	    function focusOnRange(range) {
		      var today = new Date(data[data.length - 1].date)
		      var ext = new Date(data[data.length - 1].date)

		      if (range === '1m')
		        ext.setMonth(ext.getMonth() - 1)

		      if (range === '1w')
		        ext.setDate(ext.getDate() - 7)

		      if (range === '1y')
		        ext.setFullYear(ext.getFullYear() - 1)

		      brush.extent([ext, today])
		      brushed()
	      // context.select('g.x.brush').call(brush.extent([ext, today]))
	    }

  })// end Data

}());
</script>
<script>

</script>